{"version":3,"sources":["components/Session.js","components/Break.js","components/Display.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Session","props","className","onClick","handleSessionClickDown","handleSessionClickUp","Break","handleBreakClickDown","Time","handleBreakClickUp","Display","moment","format","Menu","handleMenuClickStart","handleMenuClickPause","handleMenuClickWipeAll","App","state","Stop","State","url","audio","Audio","bind","this","setState","interval","setInterval","clearInterval","pause","play","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c01eedcd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Session.css';\r\nimport { FaArrowUp , FaArrowDown } from \"react-icons/fa\";\r\n\r\nconst Session = (props) => <div className='Session'>\r\n    <h1>Session Length</h1>\r\n    <div className='Total-Session'><FaArrowDown onClick ={props.handleSessionClickDown} /><h1>{props.Session}</h1><FaArrowUp onClick ={props.handleSessionClickUp} /></div>\r\n</div>\r\n\r\nexport default Session;\r\n","import React from 'react';\r\nimport './Break.css';\r\nimport { FaArrowUp , FaArrowDown } from \"react-icons/fa\";\r\n\r\nconst Break = (props) => <div className='Break'>\r\n    <h1>Break Length</h1>\r\n    <div className='Total-Break'><FaArrowDown onClick ={props.handleBreakClickDown}/><h1>{props.Time}</h1><FaArrowUp onClick ={props.handleBreakClickUp}/></div>\r\n</div>\r\n\r\nexport default Break;\r\n","import React from 'react';\r\nimport './Display.css';\r\nimport moment from 'moment' //quên thì lên đây coi lại https://stackoverflow.com/questions/37993202/moment-js-with-react-js-es6\r\n\r\nconst Display = (props) => <div className='Display'>\r\n    <h1>{props.Display}</h1>\r\n    <div className='Total-Display'><h1>{ moment(props.Time).format('mm:ss') }</h1></div>\r\n</div>\r\n\r\nexport default Display;\r\n","import React from 'react';\r\nimport './Menu.css';\r\nimport { FaPlay , FaStop , FaSyncAlt } from \"react-icons/fa\";\r\n\r\nconst Menu = (props) =>\r\n\r\n<div className ='Menu'>\r\n    \r\n    <FaPlay className='FaMenu'\r\nonClick ={props.handleMenuClickStart}\r\n    />\r\n    \r\n    <FaStop className='FaMenu'\r\nonClick ={props.handleMenuClickPause}    \r\n    />\r\n    \r\n    <FaSyncAlt className='FaMenu' \r\nonClick ={props.handleMenuClickWipeAll}\r\n/>\r\n</div>\r\n\r\nexport default Menu;\r\n","import React,{ Component } from 'react';\nimport './App.css';\n\nimport Session from './components/Session';\nimport Break from './components/Break';\nimport Display from './components/Display';\nimport Menu from './components/Menu';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      Break: 5,\n      Session: 25,\n      Time: 25*60*1000,\n      Stop: true,\n      Display: 'Session',\n      State: true\n    }\n\n    this.url = \"https://goo.gl/65cBl1\";//tạo đường dẫn đến link chứa file âm thanh\n    this.audio = new Audio(this.url)//tạo ra 1 thẻ audio\n\n    this.handleBreakClickDown = this.handleBreakClickDown.bind(this)\n    this.handleBreakClickUp = this.handleBreakClickUp.bind(this)\n    this.handleSessionClickDown = this.handleSessionClickDown.bind(this)\n    this.handleSessionClickUp = this.handleSessionClickUp.bind(this)\n    this.handleMenuClickStart = this.handleMenuClickStart.bind(this)\n    this.handleMenuClickPause = this.handleMenuClickPause.bind(this)\n    this.handleMenuClickWipeAll = this.handleMenuClickWipeAll.bind(this)\n  }\n\n  handleBreakClickDown(){\n    if(this.state.Stop){\n      if ( this.state.Break > 1 )\n    this.setState({\n      Break : this.state.Break - 1,\n    })\n  }\n}\n  handleBreakClickUp(){\n    if(this.state.Stop){\n      if ( this.state.Break < 60 )\n    this.setState({\n      Break : this.state.Break + 1,\n    })\n  }\n}\n  handleSessionClickDown(){\n    if(this.state.Stop){\n      if ( this.state.Session > 1 )\n    this.setState({\n      Session : this.state.Session - 1,\n      Time :( this.state.Session -1 ) * 60 * 1000\n      })\n    }\n  }\n  handleSessionClickUp(){\n    if(this.state.Stop){\n      if ( this.state.Session < 60 )\n    this.setState({\n      Session : this.state.Session + 1,\n      Time :( this.state.Session + 1 ) * 60 * 1000\n      })\n    }\n  }\n  handleMenuClickStart(){\n    //đầu tiên chuyển về false \n    this.setState({Stop: false})\n    //tạo 1 biến interval\n    let interval = setInterval(() => {\n      if(this.state.Stop === false ){ //nếu là false thì đếm \n        if(this.state.Time > 0){\n      this.setState({\n        Time: this.state.Time - 1000\n      })\n    }\n    else{\n      if(this.state.State === true)\n      this.setState({\n        Time: this.state.Break * 60 * 1000,\n        Display: 'Break',\n        State: ! this.state.State\n      })\n      else{\n        this.setState({\n          Time: this.state.Session * 60 * 1000,\n          Display: 'Session',\n          State: ! this.state.State\n        })\n      }\n    }\n    }\n      else{\n        clearInterval(interval)  //nếu là false thì xóa bỏ interval để dừng đếm ngược\n      }\n    }, 1000);\n}\nhandleMenuClickPause(){\n  this.setState({Stop: true});\n  this.audio.pause();\n}\nhandleMenuClickWipeAll(){\n  this.setState({\n    Break: 5,\n      Session: 25,\n      Time: 25*60*1000,\n      Stop: true,  //chuyển về true để pause lại nếu không nó sẽ vẫn chạy tiếp\n      Display: 'Session',\n      State: true\n  })\n}\n  render(){\n    if(this.state.Time === 0){\n      this.audio.play();\n      console.log('ring ring ring')\n    }\n  return (\n    <div className=\"App\">                          \n      <div><h1>Pomodoro Clock</h1></div>\n      <div className='Length'>\n      <Break \n      Time ={this.state.Break}\n      handleBreakClickDown = {this.handleBreakClickDown}\n      handleBreakClickUp = {this.handleBreakClickUp}\n      >\n      </Break>\n\n      <Session \n      Session = {this.state.Session} \n      handleSessionClickDown = {this.handleSessionClickDown}\n      handleSessionClickUp = {this.handleSessionClickUp}\n      >\n      </Session>\n      </div>\n\n      <Display \n      Time={this.state.Time}\n      Display={this.state.Display}\n      >\n      </Display>\n\n      <Menu \n      handleMenuClickStart = {this.handleMenuClickStart}\n      handleMenuClickPause = {this.handleMenuClickPause}\n      handleMenuClickWipeAll = {this.handleMenuClickWipeAll}\n      />\n    </div>\n  );\n}\n}\n\nexport default App;   ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}